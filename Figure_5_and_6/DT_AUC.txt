#######Load package
library(RWeka)
library(caret)
library(randomForest)
library(kernlab)
library(e1071)
library(corrplot)
library(C50)
library(nnet)
library(GA)
library(cvTools) 
library(Metrics)
library(MASS)
library(pls)
library(AUC)
library(ROCR)

## AtomPairs2DFingerprintCount.csv
## AtomPairs2DFingerprinter.csv
## EStateFingerprinter.csv
## ExtendedFingerprinter.csv
## Fingerprinter.csv
## GraphOnlyFingerprinter.csv
## KlekotaRothFingerprintCount.csv
## KlekotaRothFingerprinter.csv
## MACCSFingerprinter.csv
## PubchemFingerprinter.csv
## SubstructureFingerprintCount.csv
## SubstructureFingerprinter.csv

dat = read.csv("Fingerprinter.csv", header = TRUE)
df = dat1[,-1]
data = Filter(function(x) sd(x) >= 0.1, df)
Pos = subset(data, Activity == 'active')
Neg = subset(data, Activity == 'inactive')

nPos = nrow(Pos)
nNeg = nrow(Neg)

m= 100
AUCtr  <- matrix(nrow = m, ncol = 1)
AUCcv  <- matrix(nrow = m, ncol = 1)
AUCts  <- matrix(nrow = m, ncol = 1)

for (i in 1:m){
#######  Dividing Training and Testing sets on positive and negative classes
sample <- c(sample(1:nrow(Neg) ,32))
BNeg <- Neg[sample,]
nBNeg = nrow(BNeg)
sample1 <- c(sample(1:nPos,24))
sample2 <- c(sample(1:nBNeg,24 ))
  train1  <- Pos[sample1,] ####Positive set for training
  train2  <- BNeg[sample2,] ####Negative set for training
  test1 <-   Pos[-sample1,]    ####Positive set for testing
  test2 <-   BNeg[-sample2,]    ####Negative set for testing 
  internal <- rbind(train1,train2) ####combining for internal set
  external <- rbind(test1,test2)    ####combining for external set
 
######Loop for 10-fold CV
k <- 5;
folds <- cvsegments(nrow(internal), k);
true <- data.frame()
label <- data.frame()

for (fold in 1:k){
  currentFold <- folds[fold][[1]];
  DT = C5.0(x = internal[-currentFold,], y = internal[-currentFold,]$Activity)
 
  true = rbind(true, predict(DT, internal[currentFold,],type="prob")[,2])
  label = rbind(label, internal[currentFold,]$Activity)
  }

prob = melt(true)
actual = melt(label)
pred=prediction(prob[,2],actual[,2])
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUCcv[i,] = perf_AUC@y.values[[1]]

################### External validation
DT = C5.0(x =internal[, -ncol(internal)], y = internal$Activity)
predictions=predict(DT, external,type = "prob")
pred=prediction(predictions[,2],external[,ncol(external)])
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUCts[i,] = perf_AUC@y.values[[1]]

################### Performance report
}
resultAUC = data.frame(AUCcv,AUCts)

average  <- matrix(nrow = 2, ncol = 1)
std  <- matrix(nrow = 2, ncol = 1)

for (i in 1:2){
average[i,] = mean(resultAUC[,i])
std[i,] = sd(resultAUC[,i])
}
finalRE = cbind(average,std)

write.csv(finalRE, "DT_AUC_Fingerprinter.csv", row.names=TRUE, na="")

################### Preparing data for ROC curve
dat = read.csv("Fingerprinter.csv", header = TRUE)
df = dat1[,-1]
data = Filter(function(x) sd(x) >= 0.1, df)
Pos = subset(data, Activity == 'active')
Neg = subset(data, Activity == 'inactive')
nPos = nrow(Pos)
nNeg = nrow(Neg)

m=100
probcv  <- matrix(nrow =  50, ncol = m)
probext  <- matrix(nrow =  16, ncol = m)
labelcv  <- matrix(nrow =  50, ncol = m)
labelext  <- matrix(nrow = 50, ncol = m)

for (i in 1:m){
#######  Dividing Training and Testing sets on positive and negative classes
sample <- c(sample(1:nrow(Neg) ,32))
BNeg <- Neg[sample,]
nBNeg = nrow(BNeg)
sample1 <- c(sample(1:nPos,24))
sample2 <- c(sample(1:nBNeg,24 ))
  train1  <- Pos[sample1,] ####Positive set for training
  train2  <- BNeg[sample2,] ####Negative set for training
  test1 <-   Pos[-sample1,]    ####Positive set for testing
  test2 <-   BNeg[-sample2,]    ####Negative set for testing 
  internal <- rbind(train1,train2) ####combining for internal set
  external <- rbind(test1,test2)    ####combining for external set
 
######Loop for 10-fold CV
k <- 5;
folds <- cvsegments(nrow(internal), k);
true <- data.frame()
label <- data.frame()

for (fold in 1:k){
  currentFold <- folds[fold][[1]];
  RF = C5.0(x = internal[-currentFold,], y = internal[-currentFold,]$Activity)
  true = rbind(true, predict(RF, internal[currentFold,],type="prob")[,2])
  label = rbind(label, internal[currentFold,]$Activity)
  }
probcv[,i] = data.frame(melt(true)[,2])[,1]
write.csv(as.matrix(melt(label)$value), "matrix.csv", row.names=TRUE, na="")
label = read.csv("matrix.csv", header = TRUE)
labelcv[,i] = label[,2]

################### External validation
DT = C5.0(x =internal[, -ncol(internal)], y = internal$Activity)
probext[,i] = predict(DT, external,type = "prob")[,2]
labelext[,i] = external$Activity
}

DT_auc_cv = cbind(probcv,labelcv)
DT_auc_ext= cbind(probext,labelext)

write.csv(DT_auc_cv, "DT_auc_Fingerprinter_cv plot.csv", row.names=TRUE, na="")
write.csv(DT_auc_ext, "DT_auc_Fingerprinter_ext plot.csv", row.names=TRUE, na="")


